"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import pytest
from src.utils.logger import log, log_function_call, LogBlock
from config.settings import config


def test_logger_exists():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –ª–æ–≥–≥–µ—Ä–∞"""
    assert log is not None


def test_log_file_created():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
    log_file = config.LOG_DIR / config.LOG_FILE
    assert log_file.exists(), f"–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω: {log_file}"


def test_log_levels():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    log.debug("üêõ Debug message for test")
    log.info("‚ÑπÔ∏è  Info message for test")
    log.warning("‚ö†Ô∏è  Warning message for test")
    log.error("‚ùå Error message for test")
    log.success("‚úÖ Success message for test")

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    assert True


def test_log_function_call_decorator():
    """–¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ log_function_call"""

    @log_function_call
    def add_numbers(a: int, b: int) -> int:
        """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–ª–æ–∂–µ–Ω–∏—è"""
        return a + b

    result = add_numbers(2, 3)
    assert result == 5


def test_log_function_call_decorator_with_exception():
    """–¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ log_function_call –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏"""

    @log_function_call
    def divide(a: int, b: int) -> float:
        """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ª–µ–Ω–∏—è"""
        return a / b

    # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
    result = divide(10, 2)
    assert result == 5.0

    # –í—ã–∑–æ–≤ —Å –æ—à–∏–±–∫–æ–π –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    with pytest.raises(ZeroDivisionError):
        divide(10, 0)


def test_log_block_context_manager():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ LogBlock"""

    with LogBlock("–¢–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫"):
        x = 1 + 1
        assert x == 2


def test_log_block_context_manager_with_exception():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ LogBlock –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏"""

    with pytest.raises(ValueError):
        with LogBlock("–ë–ª–æ–∫ —Å –æ—à–∏–±–∫–æ–π"):
            raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")


def test_log_to_file():
    """–¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
    test_message = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª"
    log.info(test_message)

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    log_file = config.LOG_DIR / config.LOG_FILE
    with open(log_file, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å
    assert "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª" in content
