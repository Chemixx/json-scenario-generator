"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å—Ö–µ–º
"""
from datetime import datetime
from src.models.schema_models import (
    VersionStatus,
    VersionInfo,
    FieldMetadata,
    FieldChange,
    SchemaDiff,
)


# ============================================================================
# –¢–ï–°–¢–´: VersionInfo
# ============================================================================

def test_version_info_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è VersionInfo"""
    version = VersionInfo(
        version="072",
        status=VersionStatus.CURRENT,
        direction="–ö–ù, –ö–ö"
    )

    assert version.version == "072"
    assert version.status == VersionStatus.CURRENT
    assert version.direction == "–ö–ù, –ö–ö"


def test_version_info_full_version():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ full_version()"""
    # –ë–µ–∑ –ø–æ–¥–≤–µ—Ä—Å–∏–∏
    version1 = VersionInfo(version="072")
    assert version1.full_version() == "072"

    # –° –ø–æ–¥–≤–µ—Ä—Å–∏–µ–π
    version2 = VersionInfo(version="072", subversion="04")
    assert version2.full_version() == "072.04"


def test_version_info_status_checks():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
    current = VersionInfo(version="072", status=VersionStatus.CURRENT)
    assert current.is_current() is True
    assert current.is_future() is False
    assert current.is_deprecated() is False

    # –ë—É–¥—É—â–∏–π —Ä–µ–ª–∏–∑
    future = VersionInfo(version="073", status=VersionStatus.FUTURE)
    assert future.is_current() is False
    assert future.is_future() is True
    assert future.is_deprecated() is False

    # –í—ã–≤–æ–¥–∏—Ç—Å—è –∏–∑ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
    deprecating = VersionInfo(version="070", status=VersionStatus.DEPRECATING)
    assert deprecating.is_current() is False
    assert deprecating.is_future() is False
    assert deprecating.is_deprecated() is True


def test_version_info_str_repr():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ __str__ –∏ __repr__"""
    version = VersionInfo(
        version="072",
        subversion="04",
        status=VersionStatus.CURRENT
    )

    str_result = str(version)
    assert "072.04" in str_result
    assert VersionStatus.CURRENT.value in str_result

    repr_result = repr(version)
    assert "VersionInfo" in repr_result
    assert "072" in repr_result


# ============================================================================
# –¢–ï–°–¢–´: FieldMetadata
# ============================================================================

def test_field_metadata_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è FieldMetadata"""
    field_meta = FieldMetadata(
        path="loanRequest/creditAmt",
        name="creditAmt",
        field_type="integer",
        is_required=True,
        constraints={"maxIntLength": 10}
    )

    assert field_meta.path == "loanRequest/creditAmt"
    assert field_meta.name == "creditAmt"
    assert field_meta.field_type == "integer"
    assert field_meta.is_required is True


def test_field_metadata_type_checks():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞"""
    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø
    primitive = FieldMetadata(
        path="field1",
        name="field1",
        field_type="string"
    )
    assert primitive.is_primitive() is True
    assert primitive.is_complex() is False

    # –°–ª–æ–∂–Ω—ã–π —Ç–∏–ø - –æ–±—ä–µ–∫—Ç
    complex_obj = FieldMetadata(
        path="field2",
        name="field2",
        field_type="object"
    )
    assert complex_obj.is_primitive() is False
    assert complex_obj.is_complex() is True

    # –°–ª–æ–∂–Ω—ã–π —Ç–∏–ø - –º–∞—Å—Å–∏–≤
    complex_array = FieldMetadata(
        path="field3",
        name="field3",
        field_type="array"
    )
    assert complex_array.is_primitive() is False
    assert complex_array.is_complex() is True


def test_field_metadata_dictionary():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏"""
    # –° —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º
    with_dict = FieldMetadata(
        path="field1",
        name="field1",
        field_type="integer",
        dictionary="PRODUCT_TYPE"
    )
    assert with_dict.has_dictionary() is True

    # –ë–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    without_dict = FieldMetadata(
        path="field2",
        name="field2",
        field_type="string"
    )
    assert without_dict.has_dictionary() is False


def test_field_metadata_constraints():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
    field_meta = FieldMetadata(
        path="field1",
        name="field1",
        field_type="string",
        constraints={
            "maxLength": 100,
            "minLength": 5,
            "pattern": "^[A-Z]+$"
        }
    )

    assert field_meta.get_max_length() == 100
    assert field_meta.get_min_length() == 5
    assert field_meta.get_pattern() == "^[A-Z]+$"


def test_field_metadata_requirement_status():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ get_requirement_status()"""
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
    required = FieldMetadata(
        path="field1",
        name="field1",
        field_type="string",
        is_required=True
    )
    assert required.get_requirement_status() == "–û"

    # –£—Å–ª–æ–≤–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
    conditional = FieldMetadata(
        path="field2",
        name="field2",
        field_type="string",
        is_conditional=True
    )
    assert conditional.get_requirement_status() == "–£–û"

    # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
    optional = FieldMetadata(
        path="field3",
        name="field3",
        field_type="string"
    )
    assert optional.get_requirement_status() == "–ù"


# ============================================================================
# –¢–ï–°–¢–´: FieldChange
# ============================================================================

def test_field_change_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è FieldChange"""
    change = FieldChange(
        path="loanRequest/newField",
        change_type="added"
    )

    assert change.path == "loanRequest/newField"
    assert change.change_type == "added"


def test_field_change_breaking_changes():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è - –∫—Ä–∏—Ç–∏—á–Ω–æ
    old_meta = FieldMetadata(
        path="field1",
        name="field1",
        field_type="string",
        is_required=True
    )
    removed_required = FieldChange(
        path="field1",
        change_type="removed",
        old_meta=old_meta
    )
    assert removed_required.is_breaking_change() is True

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ - –∫—Ä–∏—Ç–∏—á–Ω–æ
    type_change = FieldChange(
        path="field2",
        change_type="modified",
        changes={"type": "string ‚Üí integer"}
    )
    assert type_change.is_breaking_change() is True

    # –ü–æ–ª–µ —Å—Ç–∞–ª–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º - –∫—Ä–∏—Ç–∏—á–Ω–æ
    required_change = FieldChange(
        path="field3",
        change_type="modified",
        changes={"required": "–ù ‚Üí –û"}
    )
    assert required_change.is_breaking_change() is True

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    added = FieldChange(
        path="field4",
        change_type="added"
    )
    assert added.is_breaking_change() is False


def test_field_change_severity():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ get_severity()"""
    # –ö—Ä–∏—Ç–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    breaking = FieldChange(
        path="field1",
        change_type="modified",
        changes={"type": "string ‚Üí integer"}
    )
    assert breaking.get_severity() == "critical"

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    warning = FieldChange(
        path="field2",
        change_type="modified",
        changes={"maxLength": "100 ‚Üí 50"}
    )
    assert warning.get_severity() == "warning"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ
    info = FieldChange(
        path="field3",
        change_type="added"
    )
    assert info.get_severity() == "info"


def test_field_change_str_repr():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ __str__ –∏ __repr__"""
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
    added = FieldChange(path="field1", change_type="added")
    assert "‚ûï" in str(added)
    assert "field1" in str(added)

    # –£–¥–∞–ª–µ–Ω–∏–µ
    removed = FieldChange(path="field2", change_type="removed")
    assert "‚ûñ" in str(removed)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ
    modified = FieldChange(
        path="field3",
        change_type="modified",
        changes={"type": "string ‚Üí integer"}
    )
    assert "üîÑ" in str(modified)
    assert "type" in str(modified)


# ============================================================================
# –¢–ï–°–¢–´: SchemaDiff
# ============================================================================

def test_schema_diff_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è SchemaDiff"""
    diff = SchemaDiff(
        old_version="070",
        new_version="072",
        call="Call1"
    )

    assert diff.old_version == "070"
    assert diff.new_version == "072"
    assert diff.call == "Call1"
    assert isinstance(diff.timestamp, datetime)


def test_schema_diff_total_changes():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ total_changes()"""
    diff = SchemaDiff(
        old_version="070",
        new_version="072",
        call="Call1"
    )

    # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ
    assert diff.total_changes() == 0
    assert diff.has_changes() is False

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    diff.added_fields.append(FieldChange(path="field1", change_type="added"))
    diff.removed_fields.append(FieldChange(path="field2", change_type="removed"))
    diff.modified_fields.append(FieldChange(path="field3", change_type="modified"))

    assert diff.total_changes() == 3
    assert diff.has_changes() is True


def test_schema_diff_breaking_changes():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"""
    diff = SchemaDiff(
        old_version="070",
        new_version="072",
        call="Call1"
    )

    # –ë–µ–∑ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    diff.added_fields.append(FieldChange(path="field1", change_type="added"))
    assert diff.has_breaking_changes() is False
    assert len(diff.get_breaking_changes()) == 0

    # –° –∫—Ä–∏—Ç–∏—á–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    breaking_change = FieldChange(
        path="field2",
        change_type="modified",
        changes={"type": "string ‚Üí integer"}
    )
    diff.modified_fields.append(breaking_change)

    assert diff.has_breaking_changes() is True
    assert len(diff.get_breaking_changes()) == 1
    assert diff.get_breaking_changes()[0] == breaking_change


def test_schema_diff_statistics():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ get_statistics()"""
    diff = SchemaDiff(
        old_version="070",
        new_version="072",
        call="Call1"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    diff.added_fields.append(FieldChange(path="field1", change_type="added"))
    diff.added_fields.append(FieldChange(path="field2", change_type="added"))
    diff.removed_fields.append(FieldChange(path="field3", change_type="removed"))
    diff.modified_fields.append(FieldChange(
        path="field4",
        change_type="modified",
        changes={"type": "string ‚Üí integer"}
    ))

    stats = diff.get_statistics()

    assert stats["added"] == 2
    assert stats["removed"] == 1
    assert stats["modified"] == 1
    assert stats["total"] == 4
    assert stats["breaking"] == 1  # –¢–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞


def test_schema_diff_str_repr():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ __str__ –∏ __repr__"""
    diff = SchemaDiff(
        old_version="070",
        new_version="072",
        call="Call1"
    )
    diff.added_fields.append(FieldChange(path="field1", change_type="added"))

    str_result = str(diff)
    assert "070" in str_result
    assert "072" in str_result
    assert "Call1" in str_result

    repr_result = repr(diff)
    assert "SchemaDiff" in repr_result
