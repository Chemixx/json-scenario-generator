"""
–ü–∞—Ä—Å–µ—Ä JSON Schema
–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π –∏–∑ JSON Schema –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
"""
from pathlib import Path
from typing import Dict, Any, Set
from src.models.schema_models import FieldMetadata, FieldChange, SchemaDiff
from src.utils.json_utils import load_json
from src.utils.logger import get_logger

logger = get_logger(__name__)


class SchemaParser:
    """
    –ü–∞—Ä—Å–µ—Ä JSON Schema

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π –∏–∑ JSON Schema:
    - –¢–∏–ø—ã –ø–æ–ª–µ–π
    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (required)
    - –£—Å–ª–æ–≤–Ω–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (condition)
    - –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (dictionary)
    - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (constraints)

    Example:
        .. code-block:: python

            parser = SchemaParser()
            schema = parser.load_schema(Path("V072Call1Rq.json"))
            fields = parser.parse_schema(schema)
            for path, field in fields.items():
                print(f"{path}: {field.field_type}")
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.logger = get_logger(self.__class__.__name__)

    def load_schema(self, file_path: Path) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON Schema –∏–∑ —Ñ–∞–π–ª–∞

        Args:
            file_path: –ü—É—Ç—å –∫ JSON Schema —Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å JSON Schema

        Raises:
            FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        self.logger.info(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã –∏–∑ {file_path.name}")
        return load_json(file_path)

    def parse_schema(
        self,
        schema: Dict[str, Any],
        parent_path: str = ""
    ) -> Dict[str, FieldMetadata]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ JSON Schema –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π

        Args:
            schema: JSON Schema –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            parent_path: –ü—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–±—ä–µ–∫—Ç—É (–¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏)

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–ø—É—Ç—å_–∫_–ø–æ–ª—é: FieldMetadata}

        Example:
            .. code-block:: python

                parser = SchemaParser()
                schema_data = {"type": "object", "properties": {...}}
                fields = parser.parse_schema(schema_data)
        """
        self.logger.info("üîç –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON Schema")

        fields: Dict[str, FieldMetadata] = {}
        required_fields = self._get_required_fields(schema)

        # –ü–∞—Ä—Å–∏–º —Å–≤–æ–π—Å—Ç–≤–∞
        properties = schema.get("properties", {})
        for field_name, field_schema in properties.items():
            field_path = self._build_path(parent_path, field_name)

            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
            field_metadata = self._parse_field(
                field_name=field_name,
                field_path=field_path,
                field_schema=field_schema,
                is_required=field_name in required_fields
            )

            fields[field_path] = field_metadata

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–∞—Ä—Å–∏–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            if field_metadata.field_type == "object" and "properties" in field_schema:
                nested_fields = self.parse_schema(field_schema, parent_path=field_path)
                fields.update(nested_fields)

            # –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–æ–≤
            if field_metadata.field_type == "array" and "items" in field_schema:
                items_metadata = self._parse_array_items(
                    field_path=field_path,
                    items_schema=field_schema["items"]
                )
                field_metadata.items = items_metadata

                # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ - –æ–±—ä–µ–∫—Ç—ã, –ø–∞—Ä—Å–∏–º –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞
                if items_metadata.field_type == "object" and "properties" in field_schema["items"]:
                    array_item_path = f"{field_path}[]"
                    nested_fields = self.parse_schema(
                        field_schema["items"],
                        parent_path=array_item_path
                    )
                    fields.update(nested_fields)

        self.logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(fields)} –ø–æ–ª–µ–π")
        return fields

    def _parse_field(
        self,
        field_name: str,
        field_path: str,
        field_schema: Dict[str, Any],
        is_required: bool
    ) -> FieldMetadata:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è

        Args:
            field_name: –ò–º—è –ø–æ–ª—è
            field_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–æ–ª—é
            field_schema: –°—Ö–µ–º–∞ –ø–æ–ª—è
            is_required: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª–µ

        Returns:
            FieldMetadata —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è
        """
        field_type = field_schema.get("type", "unknown")
        description = field_schema.get("description", "")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        dictionary = field_schema.get("dictionary")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å–ª–æ–≤–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        is_conditional = "condition" in field_schema
        condition = field_schema.get("condition")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        constraints = self._extract_constraints(field_schema)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
        field_format = field_schema.get("format")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_value = field_schema.get("default")

        return FieldMetadata(
            path=field_path,
            name=field_name,
            field_type=field_type,
            is_required=is_required,
            is_conditional=is_conditional,
            condition=condition,
            dictionary=dictionary,
            constraints=constraints,
            description=description,
            format=field_format,
            default=default_value
        )

    def _parse_array_items(
        self,
        field_path: str,
        items_schema: Dict[str, Any]
    ) -> FieldMetadata:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞

        Args:
            field_path: –ü—É—Ç—å –∫ –º–∞—Å—Å–∏–≤—É
            items_schema: –°—Ö–µ–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞

        Returns:
            FieldMetadata –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        """
        item_type = items_schema.get("type", "unknown")
        description = items_schema.get("description", "")
        constraints = self._extract_constraints(items_schema)
        dictionary = items_schema.get("dictionary")

        return FieldMetadata(
            path=f"{field_path}[]",
            name="items",
            field_type=item_type,
            constraints=constraints,
            description=description,
            dictionary=dictionary
        )

    @staticmethod
    def _extract_constraints(field_schema: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏–∑ —Å—Ö–µ–º—ã –ø–æ–ª—è

        Args:
            field_schema: –°—Ö–µ–º–∞ –ø–æ–ª—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        """
        constraints = {}

        # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if "minLength" in field_schema:
            constraints["minLength"] = field_schema["minLength"]
        if "maxLength" in field_schema:
            constraints["maxLength"] = field_schema["maxLength"]
        if "pattern" in field_schema:
            constraints["pattern"] = field_schema["pattern"]

        # –ß–∏—Å–ª–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if "minimum" in field_schema:
            constraints["minimum"] = field_schema["minimum"]
        if "maximum" in field_schema:
            constraints["maximum"] = field_schema["maximum"]
        if "maxIntLength" in field_schema:
            constraints["maxIntLength"] = field_schema["maxIntLength"]

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
        if "minItems" in field_schema:
            constraints["minItems"] = field_schema["minItems"]
        if "maxItems" in field_schema:
            constraints["maxItems"] = field_schema["maxItems"]

        # Enum (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        if "enum" in field_schema:
            constraints["enum"] = field_schema["enum"]

        return constraints

    @staticmethod
    def _get_required_fields(schema: Dict[str, Any]) -> Set[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π

        Args:
            schema: JSON Schema

        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–º–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        """
        return set(schema.get("required", []))

    @staticmethod
    def _build_path(parent_path: str, field_name: str) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∫ –ø–æ–ª—é

        Args:
            parent_path: –ü—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
            field_name: –ò–º—è –ø–æ–ª—è

        Returns:
            –ü–æ–ª–Ω—ã–π –ø—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "loanRequest/creditAmt")
        """
        if parent_path:
            return f"{parent_path}/{field_name}"
        return field_name

    def compare_schemas(
        self,
        old_fields: Dict[str, FieldMetadata],
        new_fields: Dict[str, FieldMetadata]
    ) -> SchemaDiff:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å—Ö–µ–º

        Args:
            old_fields: –ü–æ–ª—è —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã
            new_fields: –ü–æ–ª—è –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã

        Returns:
            SchemaDiff —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        """
        self.logger.info("üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ö–µ–º")

        old_paths = set(old_fields.keys())
        new_paths = set(new_fields.keys())

        added_paths = new_paths - old_paths
        removed_paths = old_paths - new_paths
        common_paths = old_paths & new_paths

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        old_version = "unknown"
        new_version = "unknown"

        diff = SchemaDiff(
            old_version=old_version,
            new_version=new_version,
            call="unknown"
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        for path in added_paths:
            change = FieldChange(
                path=path,
                change_type="added",
                new_meta=new_fields[path]
            )
            diff.added_fields.append(change)

        # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        for path in removed_paths:
            change = FieldChange(
                path=path,
                change_type="removed",
                old_meta=old_fields[path]
            )
            diff.removed_fields.append(change)

        # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        for path in common_paths:
            old_field = old_fields[path]
            new_field = new_fields[path]

            if self._fields_differ(old_field, new_field):
                changes = self._detect_field_changes(old_field, new_field)
                change = FieldChange(
                    path=path,
                    change_type="modified",
                    old_meta=old_field,
                    new_meta=new_field,
                    changes=changes
                )
                diff.modified_fields.append(change)

        self.logger.info(
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è: +{len(diff.added_fields)} –ø–æ–ª–µ–π, "
            f"-{len(diff.removed_fields)} –ø–æ–ª–µ–π, ~{len(diff.modified_fields)} –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        )

        return diff

    @staticmethod
    def _fields_differ(
        old_field: FieldMetadata,
        new_field: FieldMetadata
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ª–∏ –¥–≤–∞ –ø–æ–ª—è

        Args:
            old_field: –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
            new_field: –ù–æ–≤–æ–µ –ø–æ–ª–µ

        Returns:
            True, –µ—Å–ª–∏ –ø–æ–ª—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
        """
        return (
            old_field.field_type != new_field.field_type or
            old_field.is_required != new_field.is_required or
            old_field.is_conditional != new_field.is_conditional or
            old_field.dictionary != new_field.dictionary or
            old_field.constraints != new_field.constraints or
            old_field.format != new_field.format or
            old_field.default != new_field.default
        )

    @staticmethod
    def _detect_field_changes(
        old_field: FieldMetadata,
        new_field: FieldMetadata
    ) -> Dict[str, str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–µ

        Args:
            old_field: –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
            new_field: –ù–æ–≤–æ–µ –ø–æ–ª–µ

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        changes = {}

        if old_field.field_type != new_field.field_type:
            changes["type"] = f"{old_field.field_type} ‚Üí {new_field.field_type}"

        if old_field.is_required != new_field.is_required:
            changes["required"] = f"{old_field.is_required} ‚Üí {new_field.is_required}"

        if old_field.is_conditional != new_field.is_conditional:
            changes["conditional"] = f"{old_field.is_conditional} ‚Üí {new_field.is_conditional}"

        if old_field.dictionary != new_field.dictionary:
            changes["dictionary"] = f"{old_field.dictionary} ‚Üí {new_field.dictionary}"

        if old_field.constraints != new_field.constraints:
            changes["constraints"] = "–∏–∑–º–µ–Ω–µ–Ω—ã"

        if old_field.format != new_field.format:
            changes["format"] = f"{old_field.format} ‚Üí {new_field.format}"

        if old_field.default != new_field.default:
            changes["default"] = f"{old_field.default} ‚Üí {new_field.default}"

        return changes
