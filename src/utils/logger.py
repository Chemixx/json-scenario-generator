"""
–ú–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º loguru
"""
from loguru import logger
import sys
from pathlib import Path
from config.settings import config


def setup_logger():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º loguru

    –°–æ–∑–¥–∞–µ—Ç –¥–≤–∞ handler'–∞:
    1. –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–∞–º–∏
    2. –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π

    Returns:
        logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
    """
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π handler loguru
    logger.remove()

    # ======================================
    # Handler –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Å —Ü–≤–µ—Ç–∞–º–∏)
    # ======================================
    logger.add(
        sys.stdout,
        format=config.LOG_FORMAT,
        level=config.LOG_LEVEL,
        colorize=True,
        backtrace=True,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π traceback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        diagnose=True,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    )

    # ======================================
    # Handler –¥–ª—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤)
    # ======================================
    log_file_path = config.LOG_DIR / config.LOG_FILE
    logger.add(
        log_file_path,
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
        level=config.LOG_LEVEL,
        rotation=config.LOG_ROTATION,  # –†–æ—Ç–∞—Ü–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        retention=config.LOG_RETENTION,  # –•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ N –¥–Ω–µ–π
        compression="zip",  # –°–∂–∏–º–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        backtrace=True,
        diagnose=True,
    )

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    logger.info("=" * 80)
    logger.info(f"üöÄ {config.APP_NAME} v{config.APP_VERSION}")
    logger.info(f"üìÇ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {log_file_path}")
    logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.LOG_LEVEL}")
    logger.info("=" * 80)

    return logger


# ======================================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
# ======================================
log = setup_logger()


# ======================================
# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
# ======================================
def get_logger(name: str = __name__):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–æ–≥–≥–µ—Ä—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π,
    —á—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –æ—Ç–ª–∞–¥–∫—É –∏ –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ª–æ–≥–æ–≤.

    Args:
        name: –ò–º—è –º–æ–¥—É–ª—è (–æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è __name__)

    Returns:
        logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –º–æ–¥—É–ª—è

    Example:
        >>> from src.utils.logger import get_logger
        >>> logger = get_logger(__name__)
        >>> logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–æ–µ–≥–æ –º–æ–¥—É–ª—è")
    """
    return logger.bind(module=name)


# ======================================
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
# ======================================
def log_function_call(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π

    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        wrapper: –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è

    Usage:
        @log_function_call
        def my_function(arg1, arg2):
            return arg1 + arg2
    """
    from functools import wraps

    @wraps(func)
    def wrapper(*args, **kwargs):
        func_name = func.__name__
        log.debug(f"‚öôÔ∏è  –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {func_name}() —Å args={args}, kwargs={kwargs}")

        try:
            result = func(*args, **kwargs)
            log.debug(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func_name}() –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return result
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}(): {e}")
            raise

    return wrapper


# ======================================
# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
# ======================================
class LogBlock:
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞

    Args:
        block_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    Usage:
        with LogBlock("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"):
            data = load_data()
    """

    def __init__(self, block_name: str):
        self.block_name = block_name

    def __enter__(self):
        log.info(f"‚ñ∂Ô∏è  –ù–∞—á–∞–ª–æ: {self.block_name}")
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is None:
            log.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {self.block_name}")
        else:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ '{self.block_name}': {exc_val}")
        return False  # –ù–µ –ø–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
