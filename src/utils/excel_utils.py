"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel
"""
from pathlib import Path
from typing import List, Dict, Any, Optional
import pandas as pd
from src.utils.logger import get_logger

logger = get_logger(__name__)


# ============================================================================
# –ó–ê–ì–†–£–ó–ö–ê EXCEL
# ============================================================================

def load_excel(
    file_path: Path,
    sheet_name: Optional[str] = None,
    header: int = 0
) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞

    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ None, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç)
        header: –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)

    Returns:
        DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏

    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω

    Example:
        >>> df = load_excel(Path("data.xlsx"), sheet_name="Sheet1")
        >>> print(df.head())
    """
    if not file_path.exists():
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

    try:
        sheet_info = f", –ª–∏—Å—Ç: {sheet_name}" if sheet_name else ""
        logger.debug(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ Excel –∏–∑ {file_path.name}{sheet_info}")

        df = pd.read_excel(file_path, sheet_name=sheet_name, header=header)

        logger.info(f"‚úÖ Excel —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫")
        return df
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel –∏–∑ {file_path}: {e}")
        raise


def get_sheet_names(file_path: Path) -> List[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏—Å—Ç–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ

    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏—Å—Ç–æ–≤

    Example:
        >>> sheets = get_sheet_names(Path("data.xlsx"))
        >>> print(sheets)
        ['Sheet1', 'Sheet2']
    """
    if not file_path.exists():
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

    try:
        excel_file = pd.ExcelFile(file_path)
        sheet_names = excel_file.sheet_names
        logger.debug(f"üìã –õ–∏—Å—Ç—ã –≤ {file_path.name}: {sheet_names}")
        return sheet_names
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–æ–≤ –∏–∑ {file_path}: {e}")
        raise


# ============================================================================
# –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•
# ============================================================================

def excel_to_dict(
    file_path: Path,
    sheet_name: Optional[str] = None
) -> List[Dict[str, Any]]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Excel –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = —Å–ª–æ–≤–∞—Ä—å)

    Example:
        >>> data = excel_to_dict(Path("data.xlsx"))
        >>> print(data[0])
        {'column1': 'value1', 'column2': 'value2'}
    """
    df = load_excel(file_path, sheet_name=sheet_name)

    # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ None
    df = df.where(pd.notna(df), None)

    records = df.to_dict(orient='records')
    logger.debug(f"üìä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(records)} —Å—Ç—Ä–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä–∏")

    return records


def excel_to_json(
    file_path: Path,
    output_path: Path,
    sheet_name: Optional[str] = None,
    indent: int = 2
) -> None:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Excel –≤ JSON —Ñ–∞–π–ª

    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É JSON —Ñ–∞–π–ª—É
        sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
        indent: –û—Ç—Å—Ç—É–ø –¥–ª—è JSON (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)

    Example:
        >>> excel_to_json(Path("data.xlsx"), Path("output.json"))
    """
    import json

    data = excel_to_dict(file_path, sheet_name=sheet_name)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    output_path.parent.mkdir(parents=True, exist_ok=True)

    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=indent, ensure_ascii=False)

    logger.info(f"‚úÖ Excel –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ JSON: {output_path.name}")


# ============================================================================
# –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –ü–û–ò–°–ö
# ============================================================================

def filter_excel_by_column(
    file_path: Path,
    column_name: str,
    value: Any,
    sheet_name: Optional[str] = None
) -> pd.DataFrame:
    """
    –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å Excel –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –≤ –∫–æ–ª–æ–Ω–∫–µ

    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        column_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞

    Returns:
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame

    Example:
        >>> df = filter_excel_by_column(Path("data.xlsx"), "Status", "Active")
    """
    df = load_excel(file_path, sheet_name=sheet_name)

    if column_name not in df.columns:
        logger.error(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")
        raise ValueError(f"–ö–æ–ª–æ–Ω–∫–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    filtered = df[df[column_name] == value]
    logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(filtered)} —Å—Ç—Ä–æ–∫ —Å {column_name}='{value}'")

    return filtered


def get_unique_values(
    file_path: Path,
    column_name: str,
    sheet_name: Optional[str] = None
) -> List[Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–ª–æ–Ω–∫–∏

    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        column_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞

    Returns:
        –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

    Example:
        >>> values = get_unique_values(Path("data.xlsx"), "Category")
    """
    df = load_excel(file_path, sheet_name=sheet_name)

    if column_name not in df.columns:
        logger.error(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")
        raise ValueError(f"–ö–æ–ª–æ–Ω–∫–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    unique_values = df[column_name].dropna().unique().tolist()
    logger.debug(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(unique_values)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ '{column_name}'")

    return unique_values
