"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
"""
import json
from pathlib import Path
from typing import Dict, Any, Optional, List
from src.utils.logger import get_logger

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON Schema
try:
    from jsonschema import validate, ValidationError, Draft7Validator
    JSONSCHEMA_AVAILABLE = True
except ImportError:
    JSONSCHEMA_AVAILABLE = False
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤, –µ—Å–ª–∏ jsonschema –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    ValidationError = Exception  # type: ignore
    Draft7Validator = None  # type: ignore

logger = get_logger(__name__)


# ============================================================================
# –ó–ê–ì–†–£–ó–ö–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–ï JSON
# ============================================================================

def load_json(file_path: Path) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON –∏–∑ —Ñ–∞–π–ª–∞

    Args:
        file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ JSON

    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        json.JSONDecodeError: –ï—Å–ª–∏ JSON –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π

    Example:
        >>> data = load_json(Path("data.json"))
        >>> print(data["key"])
    """
    if not file_path.exists():
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

    try:
        logger.debug(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ JSON –∏–∑ {file_path}")
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        logger.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {file_path.name}")
        return data
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {file_path}: {e}")
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path}: {e}")
        raise


def save_json(
    data: Dict[str, Any],
    file_path: Path,
    indent: int = 2,
    ensure_ascii: bool = False
) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        indent: –û—Ç—Å—Ç—É–ø –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
        ensure_ascii: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–∏ non-ASCII —Å–∏–º–≤–æ–ª—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)

    Example:
        >>> data = {"key": "value"}
        >>> save_json(data, Path("output.json"))
    """
    try:
        logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –≤ {file_path}")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        file_path.parent.mkdir(parents=True, exist_ok=True)

        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=indent, ensure_ascii=ensure_ascii)

        logger.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path.name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –≤ {file_path}: {e}")
        raise


# ============================================================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø JSON SCHEMA
# ============================================================================

def validate_json_schema(
    data: Dict[str, Any],
    schema: Dict[str, Any]
) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è JSON –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ö–µ–º–µ

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        schema: JSON Schema –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

    Returns:
        True, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã

    Raises:
        ValidationError: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ö–µ–º–µ
        ImportError: –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ jsonschema –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞

    Example:
        >>> schema = {"type": "object", "properties": {"name": {"type": "string"}}}
        >>> data = {"name": "Test"}
        >>> validate_json_schema(data, schema)
        True
    """
    if not JSONSCHEMA_AVAILABLE:
        logger.error("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ jsonschema –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        raise ImportError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ jsonschema: pip install jsonschema")

    try:
        validate(instance=data, schema=schema)
        logger.debug("‚úÖ JSON –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        return True
    except ValidationError as e:
        logger.error(f"‚ùå JSON –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {e.message}")
        raise


def get_validation_errors(
    data: Dict[str, Any],
    schema: Dict[str, Any]
) -> List[Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–±–µ–∑ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è)

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        schema: JSON Schema –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

    Returns:
        –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç)

    Raises:
        ImportError: –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ jsonschema –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞

    Example:
        >>> schema = {"type": "object", "properties": {"name": {"type": "string"}}}
        >>> data = {"name": 123}
        >>> errors = get_validation_errors(data, schema)
        >>> len(errors) > 0
        True
    """
    if not JSONSCHEMA_AVAILABLE:
        logger.error("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ jsonschema –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        raise ImportError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ jsonschema: pip install jsonschema")

    validator = Draft7Validator(schema)
    errors = list(validator.iter_errors(data))

    if errors:
        logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        for error in errors:
            logger.debug(f"  - {error.message}")
    else:
        logger.debug("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫")

    return errors


# ============================================================================
# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –í–´–í–û–î
# ============================================================================

def pretty_print_json(data: Dict[str, Any], indent: int = 2) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ JSON

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        indent: –û—Ç—Å—Ç—É–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ JSON

    Example:
        >>> data = {"key": "value", "nested": {"a": 1}}
        >>> print(pretty_print_json(data))
    """
    return json.dumps(data, indent=indent, ensure_ascii=False)


def minify_json(data: Dict[str, Any]) -> str:
    """
    –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å JSON (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫)

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏

    Returns:
        –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ JSON

    Example:
        >>> data = {"key": "value"}
        >>> minify_json(data)
        '{"key":"value"}'
    """
    return json.dumps(data, separators=(',', ':'), ensure_ascii=False)


# ============================================================================
# –†–ê–ë–û–¢–ê –°–û –°–•–ï–ú–ê–ú–ò
# ============================================================================

def merge_schemas(base_schema: Dict[str, Any], override_schema: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–µ JSON Schema (override –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç base)

    Args:
        base_schema: –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞
        override_schema: –°—Ö–µ–º–∞ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

    Returns:
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞

    Example:
        >>> base = {"type": "object", "properties": {"a": {"type": "string"}}}
        >>> override = {"properties": {"b": {"type": "integer"}}}
        >>> merged = merge_schemas(base, override)
    """
    result = base_schema.copy()

    for key, value in override_schema.items():
        if key in result and isinstance(result[key], dict) and isinstance(value, dict):
            result[key] = merge_schemas(result[key], value)
        else:
            result[key] = value

    return result


def extract_required_fields(schema: Dict[str, Any], prefix: str = "") -> List[str]:
    """
    –ò–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∏–∑ JSON Schema

    Args:
        schema: JSON Schema
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å –ø—É—Ç–∏ (–¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏)

    Returns:
        –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—è–º

    Example:
        >>> schema = {
        ...     "type": "object",
        ...     "required": ["name"],
        ...     "properties": {"name": {"type": "string"}}
        ... }
        >>> extract_required_fields(schema)
        ['name']
    """
    required_fields: List[str] = []

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
    required = schema.get("required", [])
    for field_name in required:
        field_path = f"{prefix}/{field_name}" if prefix else field_name
        required_fields.append(field_path)

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    properties = schema.get("properties", {})
    for field_name, field_schema in properties.items():
        if field_schema.get("type") == "object":
            field_path = f"{prefix}/{field_name}" if prefix else field_name
            nested_required = extract_required_fields(field_schema, prefix=field_path)
            required_fields.extend(nested_required)

    return required_fields
