"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
–ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ Dictionary –º–æ–¥–µ–ª–∏
"""
from pathlib import Path
from typing import Dict, List, Optional
import pandas as pd
from src.models.dictionary_models import Dictionary, DictionaryEntry
from src.utils.excel_utils import load_excel, get_sheet_names
from src.utils.logger import get_logger

logger = get_logger(__name__)


class DictionaryLoader:
    """
    –ó–∞–≥—Ä—É–∑—á–∏–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞:
    1. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π: –æ–¥–∏–Ω –ª–∏—Å—Ç = –æ–¥–∏–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ (load_dictionary)
    2. –ì—Ä—É–ø–ø–æ–≤–æ–π: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ (load_dictionary_by_code)

    Example:
        .. code-block:: python

            loader = DictionaryLoader()

            # –§–æ—Ä–º–∞—Ç 1: –æ–¥–∏–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞ –ª–∏—Å—Ç–µ
            dict1 = loader.load_dictionary(
                file_path=Path("data.xlsx"),
                sheet_name="STATUS"
            )

            # –§–æ—Ä–º–∞—Ç 2: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –≤ –ª–∏—Å—Ç–µ
            dict2 = loader.load_dictionary_by_code(
                file_path=Path("dictionaries.xlsx"),
                sheet_name="All",
                dictionary_code="CUSTOMER_FLAG"
            )
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
        self.logger = get_logger(self.__class__.__name__)
        self._cache: Dict[str, Dictionary] = {}

    # ========================================================================
    # –§–û–†–ú–ê–¢ 1: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π (–æ–¥–∏–Ω –ª–∏—Å—Ç = –æ–¥–∏–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫)
    # ========================================================================

    def load_dictionary(
            self,
            file_path: Path,
            sheet_name: str,
            code_column: str = "–ö–æ–¥",
            name_column: str = "–ó–Ω–∞—á–µ–Ω–∏–µ",
            description_column: Optional[str] = None,
            skip_rows: int = 0
    ) -> Dictionary:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏–∑ Excel —Ñ–∞–π–ª–∞ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)

        –§–æ—Ä–º–∞—Ç: –æ–¥–∏–Ω –ª–∏—Å—Ç = –æ–¥–∏–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
        –ö–æ–ª–æ–Ω–∫–∏: –ö–æ–¥ | –ó–Ω–∞—á–µ–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º
            code_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–æ–¥–∞–º–∏
            name_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            description_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            skip_rows: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)

        Returns:
            Dictionary —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

        Raises:
            FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            ValueError: –ï—Å–ª–∏ –ª–∏—Å—Ç –∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

        Example:
            .. code-block:: python

                loader = DictionaryLoader()
                dictionary = loader.load_dictionary(
                    file_path=Path("data.xlsx"),
                    sheet_name="Statuses",
                    code_column="Code",
                    name_column="Name"
                )
        """
        cache_key = f"{file_path.name}:{sheet_name}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self._cache:
            self.logger.info(f"üì¶ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ '{sheet_name}' –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞")
            return self._cache[cache_key]

        self.logger.info(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ '{sheet_name}' –∏–∑ {file_path.name}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
        df = load_excel(file_path, sheet_name=sheet_name, header=skip_rows)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        self._validate_columns(df, [code_column, name_column])

        # –°–æ–∑–¥–∞–µ–º Dictionary
        dictionary = Dictionary(name=sheet_name, description=f"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏–∑ {file_path.name}")

        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏
        for _, row in df.iterrows():
            code = row.get(code_column)
            name = row.get(name_column)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if pd.isna(code) or pd.isna(name):
                continue

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã
            code = str(code).strip()
            name = str(name).strip()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            description = None
            if description_column and description_column in df.columns:
                desc_value = row.get(description_column)
                if not pd.isna(desc_value):
                    description = str(desc_value).strip()

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            entry = DictionaryEntry(
                code=code,
                name=name,
                dictionary_type=sheet_name,
                description=description
            )

            dictionary.add_entry(entry)

        self.logger.info(f"‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ '{sheet_name}' –∑–∞–≥—Ä—É–∂–µ–Ω: {len(dictionary)} –∑–∞–ø–∏—Å–µ–π")

        # –ö—ç—à–∏—Ä—É–µ–º
        self._cache[cache_key] = dictionary

        return dictionary

    def load_all_dictionaries(
            self,
            file_path: Path,
            code_column: str = "–ö–æ–¥",
            name_column: str = "–ó–Ω–∞—á–µ–Ω–∏–µ",
            description_column: Optional[str] = None,
            skip_rows: int = 0,
            exclude_sheets: Optional[List[str]] = None
    ) -> Dict[str, Dictionary]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)

        –ö–∞–∂–¥—ã–π –ª–∏—Å—Ç = –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫

        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            code_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–æ–¥–∞–º–∏
            name_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            description_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
            skip_rows: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            exclude_sheets: –°–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_–ª–∏—Å—Ç–∞: Dictionary}

        Example:
            .. code-block:: python

                loader = DictionaryLoader()
                dictionaries = loader.load_all_dictionaries(
                    file_path=Path("all_dicts.xlsx"),
                    exclude_sheets=["Legend", "Info"]
                )
        """
        if exclude_sheets is None:
            exclude_sheets = []

        self.logger.info(f"üìö –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ {file_path.name}")

        sheet_names = get_sheet_names(file_path)
        dictionaries = {}

        for sheet_name in sheet_names:
            if sheet_name in exclude_sheets:
                self.logger.debug(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –ª–∏—Å—Ç–∞ '{sheet_name}' (–≤ exclude_sheets)")
                continue

            try:
                dictionary = self.load_dictionary(
                    file_path=file_path,
                    sheet_name=sheet_name,
                    code_column=code_column,
                    name_column=name_column,
                    description_column=description_column,
                    skip_rows=skip_rows
                )
                dictionaries[sheet_name] = dictionary
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏—Å—Ç '{sheet_name}': {e}")
                continue

        self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dictionaries)} —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
        return dictionaries

    # ========================================================================
    # –§–û–†–ú–ê–¢ 2: –ì—Ä—É–ø–ø–æ–≤–æ–π (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ)
    # ========================================================================

    def load_dictionary_by_code(
            self,
            file_path: Path,
            sheet_name: str,
            dictionary_code: str,
            dictionary_code_column: str = "–ö–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞",
            value_code_column: str = "–ö–æ–¥ –†–ö–ö",
            value_name_column: str = "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è",
            skip_rows: int = 0
    ) -> Dictionary:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∫–æ–¥—É (–≥—Ä—É–ø–ø–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)

        –§–æ—Ä–º–∞—Ç: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ
        –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç –∫–æ–ª–æ–Ω–∫—É "–ö–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "CUSTOMER_FLAG")

        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            dictionary_code: –ö–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "CUSTOMER_FLAG")
            dictionary_code_column: –ö–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–¥–æ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            value_code_column: –ö–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–¥–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            value_name_column: –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            skip_rows: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞

        Returns:
            Dictionary —Å –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞

        Example:
            .. code-block:: python

                loader = DictionaryLoader()
                customer_flag = loader.load_dictionary_by_code(
                    file_path=Path("dictionaries.xlsx"),
                    sheet_name="All",
                    dictionary_code="CUSTOMER_FLAG"
                )
        """
        cache_key = f"{file_path.name}:{sheet_name}:{dictionary_code}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self._cache:
            self.logger.info(f"üì¶ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ '{dictionary_code}' –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞")
            return self._cache[cache_key]

        self.logger.info(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ '{dictionary_code}' –∏–∑ {file_path.name}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
        df = load_excel(file_path, sheet_name=sheet_name, header=skip_rows)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = [dictionary_code_column, value_code_column, value_name_column]
        self._validate_columns(df, required_cols)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–¥—É —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        filtered_df = df[df[dictionary_code_column] == dictionary_code]

        if filtered_df.empty:
            self.logger.warning(f"‚ö†Ô∏è  –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ '{dictionary_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ '{sheet_name}'")
            return Dictionary(name=dictionary_code, description=f"–ü—É—Å—Ç–æ–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {dictionary_code}")

        # –°–æ–∑–¥–∞–µ–º Dictionary
        dictionary = Dictionary(
            name=dictionary_code,
            description=f"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {dictionary_code} –∏–∑ {file_path.name}"
        )

        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏
        for _, row in filtered_df.iterrows():
            code = row.get(value_code_column)
            name = row.get(value_name_column)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if pd.isna(code) or pd.isna(name):
                continue

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã
            code = str(code).strip()
            name = str(name).strip()

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            entry = DictionaryEntry(
                code=code,
                name=name,
                dictionary_type=dictionary_code
            )
            dictionary.add_entry(entry)

        self.logger.info(f"‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ '{dictionary_code}' –∑–∞–≥—Ä—É–∂–µ–Ω: {len(dictionary)} –∑–∞–ø–∏—Å–µ–π")

        # –ö—ç—à–∏—Ä—É–µ–º
        self._cache[cache_key] = dictionary

        return dictionary

    def load_all_dictionaries_from_sheet(
            self,
            file_path: Path,
            sheet_name: str,
            dictionary_code_column: str = "–ö–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞",
            value_code_column: str = "–ö–æ–¥ –†–ö–ö",
            value_name_column: str = "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è",
            skip_rows: int = 0
    ) -> Dict[str, Dictionary]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ (–≥—Ä—É–ø–ø–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)

        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö

        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            dictionary_code_column: –ö–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–¥–æ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            value_code_column: –ö–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–¥–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            value_name_column: –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            skip_rows: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–∫–æ–¥_—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: Dictionary}

        Example:
            .. code-block:: python

                loader = DictionaryLoader()
                all_dicts = loader.load_all_dictionaries_from_sheet(
                    file_path=Path("dictionaries.xlsx"),
                    sheet_name="All"
                )
                print(f"Loaded {len(all_dicts)} dictionaries")
        """
        self.logger.info(f"üìö –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞ '{sheet_name}'")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
        df = load_excel(file_path, sheet_name=sheet_name, header=skip_rows)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        required_cols = [dictionary_code_column, value_code_column, value_name_column]
        self._validate_columns(df, required_cols)

        # –ù–∞—Ö–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        unique_codes = df[dictionary_code_column].dropna().unique()

        self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(unique_codes)} —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {list(unique_codes)[:5]}...")

        dictionaries = {}

        for dict_code in unique_codes:
            dict_code_str = str(dict_code).strip()

            try:
                dictionary = self.load_dictionary_by_code(
                    file_path=file_path,
                    sheet_name=sheet_name,
                    dictionary_code=dict_code_str,
                    dictionary_code_column=dictionary_code_column,
                    value_code_column=value_code_column,
                    value_name_column=value_name_column,
                    skip_rows=skip_rows
                )
                dictionaries[dict_code_str] = dictionary
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ '{dict_code_str}': {e}")
                continue

        self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dictionaries)} —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
        return dictionaries

    # ========================================================================
    # –£–¢–ò–õ–ò–¢–´
    # ========================================================================

    def get_cached_dictionary(self, cache_key: str) -> Optional[Dictionary]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏–∑ –∫—ç—à–∞

        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞

        Returns:
            Dictionary –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        return self._cache.get(cache_key)

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        self.logger.info("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
        self._cache.clear()

    def get_cache_info(self) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—ç—à–µ
        """
        return {
            "cached_dictionaries": len(self._cache),
            "cache_keys": list(self._cache.keys())
        }

    @staticmethod
    def _validate_columns(df: pd.DataFrame, required_columns: List[str]):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫

        Args:
            df: DataFrame –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            required_columns: –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫

        Raises:
            ValueError: –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        """
        missing_columns = [col for col in required_columns if col not in df.columns]

        if missing_columns:
            available = list(df.columns)
            raise ValueError(
                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}. "
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {available}"
            )
